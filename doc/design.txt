# design
    - meant to be *able* to be a "do everything" webserver for openbmc
    - first focus is on redfish, modular to be able to add other services
    - Want to have the development speed of python with the speed and resource usage of a compiled language












tree = map[string] eh.UUID
    = map[ redfish URI ] = repo uuid

type RedfishResourceAggregate struct {                              
    // AggregateBase implements most of the eventhorizon.Aggregate interface.                                                           
    *eh.AggregateBase             
    TreeID       eh.UUID          
    ResourceURI  string           
    Properties   map[string]interface{}                             
    PrivilegeMap map[string]interface{}                             
    Permissions  map[string]interface{}                             
    Headers      map[string]string
    Private      map[string]interface{}                             

    // Handler?
}

// POST, PUT, PATCH, DELETE, HEAD, OPTIONS(?)

Properties
==========
map[ property_name ] = "property value"
map[ property_name@meta ] = {
    "plugin": "foobar" }
    // getPlugin(plugin_name)


COMMANDS
========
Overview: separate out "backend" commands and "http" commands. There are a set of commands to satisfy HTTP get/post/etc. There are also sets of commands/events that an external entity can use to create/maintain active redfish resources.

The "backend" commands are relatively "static" in that they all operate on the aggregate and don't do special magic.

CreateRedfishResource
AddRedfishResourceProperties
UpdateRedfishResourceProperties
RemoveRedfishResourceProperties
RemoveRedfishResource

The http commands are all pluggable, with a default implementation. Need some more implementation to really work out how the pluggability works here. But right now, some sort of registry to plug in properties and how to get them.

GET
PUT
PATCH
POST
DELETE
HEAD
OPTIONS



SessionManager
  CreateRedfishResource /SessionManager
  CreateRedfishResource /SessionManager/Sessions

ComputerSystem
    ModelName -> 

// code centric or data centric?
   - do we want to write go code that sets up event listeners and then udpates? Or can we do this with metadata definitions?
   - even with data centric, we have to have code somewhere that does the updates. it's just (hopefully) well-parameterized code

// Code centric example
    1) create saga, which listens for events
    2) saga listens to events and emits stream of UpdateRedfishResourceProperty commands
    3) implicit: saga knows exactly the URL of which property to update on which resource

// data centric example
    1) CreateRedfishResource ... Properties[ "someproperty@meta": { "plugin": "runcmd" } ]
    2) saga listens for Resource created events and trundles through the resource to find any plugins
    3) need a nice way for saga to know if property ever disappears... probably need to listen for property updated
    4) saga then listens for actual events and goes through its list

// hmm... these two things end up looking very similar
    -- create helpers to automatically figure out plugins? (ie. listen for resource created events and trundle through looking for relevant plugins)
